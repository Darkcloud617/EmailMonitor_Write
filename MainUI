import win32com.client
import pythoncom
import openpyxl
from openpyxl import Workbook
from datetime import datetime, timezone
import threading
import time
import tkinter as tk
from tkinter import ttk
import zipfile

class EmailMonitor:
    def __init__(self, filename):
        self.filename = filename
        self.workbook = self.load_or_create_workbook()
        self.monitoring = False
        self.thread = None
        self.outlook = None
        self.sent_items = None

    def load_or_create_workbook(self):
        try:
            workbook = openpyxl.load_workbook(self.filename)
            print(f"Loaded existing workbook: {self.filename}")
        except (FileNotFoundError, openpyxl.utils.exceptions.InvalidFileException, zipfile.BadZipFile):
            workbook = Workbook()
            sheet = workbook.active
            sheet.title = "Emails"
            # Add headers
            sheet.append(["Timestamp", "Subject", "Body"])
            workbook.save(self.filename)
            print(f"Created new workbook: {self.filename}")
        return workbook

    def add_email_to_workbook(self, subject, body):
        sheet = self.workbook.active
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sheet.append([timestamp, subject, body])
        self.workbook.save(self.filename)
        print(f"Added email to workbook: {subject}")

    def monitor_outlook(self):
        pythoncom.CoInitialize()
        try:
            self.outlook = win32com.client.Dispatch("Outlook.Application")
            self.sent_items = self.outlook.GetNamespace("MAPI").GetDefaultFolder(5).Items
            self.event_handler = win32com.client.WithEvents(self.sent_items, SentItemsEventHandler)
            self.event_handler.init(self)
            print("Monitoring started.")
            while self.monitoring:
                pythoncom.PumpWaitingMessages()
                time.sleep(1) #wait
        finally:
            pythoncom.CoUninitialize()

    def start_monitoring(self):
        if not self.monitoring:
            self.monitoring = True
            self.thread = threading.Thread(target=self.monitor_outlook, daemon=True)
            self.thread.start()
            print("Started monitoring.")

    def stop_monitoring(self):
        if self.monitoring:
            self.monitoring = False
            if self.thread is not None:
                self.thread.join(timeout=1)  # Freezing error, so small timeout
            print("Stopped monitoring.")

class SentItemsEventHandler:
    def init(self, monitor):
        self.monitor = monitor

    def OnItemAdd(self, item):
        try:
            if item.Class == 43:  # 43 MailItem class
                subject = item.Subject
                body = item.Body
                self.monitor.add_email_to_workbook(subject, body)
        except Exception as e:
            print(f"Error processing item: {e}")

class EmailMonitorApp:
    def __init__(self, root, email_monitor):
        self.root = root
        self.email_monitor = email_monitor

        self.root.title("Email Monitor")
        self.status = tk.StringVar()
        self.status.set("Status: Inactive")

        self.toggle_button = ttk.Button(self.root, text="Start Monitoring", command=self.toggle_monitoring)
        self.toggle_button.pack(pady=10)

        self.status_label = ttk.Label(self.root, textvariable=self.status)
        self.status_label.pack(pady=10)

    def toggle_monitoring(self):
        if self.email_monitor.monitoring:
            self.email_monitor.stop_monitoring()
            self.status.set("Status: Inactive")
            self.toggle_button.config(text="Start Monitoring")
        else:
            self.email_monitor.start_monitoring()
            self.status.set("Status: Active")
            self.toggle_button.config(text="Stop Monitoring")

if __name__ == "__main__":
    filename = "emails_log.xlsx"
    email_monitor = EmailMonitor(filename)

    root = tk.Tk()
    app = EmailMonitorApp(root, email_monitor)
    root.mainloop()
